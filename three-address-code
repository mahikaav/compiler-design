#include <stdio.h>
#include <string.h>

void reverseMinus();
void processPlus();
void processDivide();
void strrev(char* str);

int i, ch, j, l, addr = 100;
char ex[10], e[10], exp1[10], exp2_var[10], id1[5], op[5], id2[5];

void strrev(char* str) {
    if (str == NULL)
        return;

    int len = strlen(str);
    int i = 0;
    int j = len - 1;

    while (i < j) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}

int main() {
    while (1) {
        printf("\n1. Assignment\n2. Arithmetic\n3. Relational\n4. Exit\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("\nEnter the expression with assignment operator: ");
                scanf("%s", e);
                l = strlen(e);
                exp2_var[0] = '\0';
                i = 0;

                while (e[i] != '=') {
                    i++;
                }

                strncat(exp2_var, e, i);
                strrev(e);
                exp1[0] = '\0';
                strncat(exp1, e, l - (i + 1));
                strrev(exp1);

                printf("Three address code:\ntemp = %s\n%s = temp\n", exp1, exp2_var);
                break;

            case 2:
                printf("\nEnter the expression with arithmetic operator: ");
                scanf("%s", ex);
                strcpy(e, ex);
                l = strlen(e);
                exp1[0] = '\0';

                for (i = 0; i < l; i++) {
                    if (e[i] == '+' || e[i] == '-') {
                        if (e[i + 2] == '/' || e[i + 2] == '*') {
                            reverseMinus();
                            break;
                        } else {
                            processPlus();
                            break;
                        }
                    } else if (e[i] == '/' || e[i] == '*') {
                        processDivide();
                        break;
                    }
                }
                break;

            case 3:
                printf("Enter the expression with relational operator: ");
                scanf("%s %s %s", id1, op, id2);

                if ((strcmp(op, "<") == 0) || (strcmp(op, ">") == 0) || (strcmp(op, "<=") == 0) ||
                    (strcmp(op, ">=") == 0) || (strcmp(op, "==") == 0) || (strcmp(op, "!=") == 0)) {
                    printf("\n%d\tif %s %s %s goto %d", addr, id1, op, id2, addr + 3);
                    addr++;
                    printf("\n%d\tT := 0", addr);
                    addr++;
                    printf("\n%d\tgoto %d", addr, addr + 2);
                    addr++;
                    printf("\n%d\tT := 1", addr);
                } else {
                    printf("Expression is error");
                }
                break;

            case 4:
                return 0;
        }
    }
}

void reverseMinus() {
    strrev(e);
    j = l - i - 1;
    strncat(exp1, e, j);
    strrev(exp1);

    printf("Three address code:\ntemp = %s\ntemp1 = %c%c temp\n", exp1, e[j + 1], e[j]);
}

void processDivide() {
    strncat(exp1, e, i + 2);

    printf("Three address code:\ntemp = %s\ntemp1 = temp %c%c\n", exp1, e[i + 2], e[i + 3]);
}

void processPlus() {
    strncat(exp1, e, i + 2);

    printf("Three address code:\ntemp = %s\ntemp1 = temp %c%c\n", exp1, e[i + 2], e[i + 3]);
}
