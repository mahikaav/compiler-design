// lex:
%{
#include "y.tab.h"
%}

%%
[a-zA-Z_][a-zA-Z_0-9]* {
    return id;
}
[0-9]+(\.[0-9]*)? {
    return num;
}
[+/*] {
    return op;
}
. {
    return yytext[0];
}
\n {
    return 0;
}
%%

int yywrap(void) {
    return 1;
}

// yacc:
%{
#include <stdio.h>
extern int yylex();
extern int yyerror(const char* s);
int valid = 1;
%}

%token num id op

%%

start : id '=' s ';'
s : id x
  | num x
  | '-' num x
  | '(' s ')' x
  ;

x : op s
  | '-' s
  |
  ;

%%

int yyerror(const char* s)
{
    valid = 0;
    printf("\nInvalid expression: %s\n", s);
    return 0;
}

int main()
{
    printf("\nEnter the expression:\n");
    yyparse();
    if (valid)
    {
        printf("\nValid expression!\n");
    }
    return 0;
}
