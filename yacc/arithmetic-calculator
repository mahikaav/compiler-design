// lex
%{
#include <stdio.h>
#include "y.tab.h"
extern int yylval;
%}

%%
[0-9]+ {
    yylval = atoi(yytext);
    return NUMBER;
}
[\t] ;
[\n] return 0;
. return yytext[0];
%%

int yywrap() {
    return 1;
}

//yacc
%{
#include <stdio.h>
extern int yylex();
extern void yyerror(const char* s);
int flag = 0;
%}

%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
%%

ArithmeticExpression: E {
    printf("\nResult = %d\n", $1);
    return 0;
};
E: E '+' E {
    $$ = $1 + $3;
}
| E '-' E {
    $$ = $1 - $3;
}
| E '*' E {
    $$ = $1 * $3;
}
| E '/' E {
    $$ = $1 / $3;
}
| E '%' E {
    $$ = $1 % $3;
}
| '(' E ')' {
    $$ = $2;
}
| NUMBER {
    $$ = $1;
};
%%

int main() {
    printf("\nEnter any arithmetic expression which can have operations Addition, Subtraction, Multiplication, Division, Modulus, and Round brackets:\n");
    yyparse();
    if (flag == 0)
        printf("\nEntered arithmetic expression is valid\n\n");
    return 0;
}

void yyerror(const char* s) {
    printf("\n%s\n\n", s);
    flag = 1;
}
